# -*- coding: utf-8 -*-
"""sentiment analysis of restaurant reviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11b65aREtejagjXSurb4jOPdqL4pdB76E
"""

import pandas as pd
import numpy as np

data=pd.read_csv("Restaurant_Reviews.tsv",sep="\t")

data.head()

data.info()

print(data.value_counts())

print(data.Liked.value_counts())



"""creating wordcloud
  installing wordcloud
"""

!pip install wordcloud

from wordcloud import WordCloud
from wordcloud import STOPWORDS

import matplotlib.pyplot as plt

def word_cloud(text):

  #create stopword list
  stopword_list=set(STOPWORDS)

  #create wordCloud
  word_cloud=WordCloud(width=550,heaight=550,background_color='white',stopwords=stopword_list,min_font_size=12).generate(text)

  #set worldcloud figure size
  plt.figure(figsize = (8,6))

  #show image
  plt.imshow(word_cloud)

  #removing axis
  plt.axis("off")

  #show plot

  plt.show()

  paragraph = ' '.join(data.Review.tolist())
  word_cloud(paragraph)

"""mostly used words"""

def word_cloud(text):

    # Create stopword list
    stopword_list = set(STOPWORDS)

    # Create WordCloud
    word_cloud = WordCloud(width = 550, height = 550,
                           background_color ='white',
                           stopwords = stopword_list,
                           min_font_size = 12).generate(text)

    # Set wordcloud figure size
    plt.figure(figsize = (8, 6))

    # Show image
    plt.imshow(word_cloud)

    # Remove Axis
    plt.axis("off")

    # show plot
    plt.show()

paragraph=' '.join(data.Review.tolist())
word_cloud(paragraph)

"""mostly used words where liked value is 1"""

paragraph=' '.join(data[data.Liked==1].Review.tolist())
word_cloud(paragraph)

"""mostly used words where liked value is 0"""

paragraph=' '.join(data[data.Liked==0].Review.tolist())
word_cloud(paragraph)

"""Feature Generation using Bag of Words"""

# Bag of word: vectors word frequency(count)
from sklearn.feature_extraction.text import CountVectorizer

from nltk.tokenize import RegexpTokenizer

#tokenizer to remove unwanted elements from data like symbols

token = RegexpTokenizer(r'[a-zA-Z0-9]+')

cv = CountVectorizer(lowercase=True,
                     stop_words='english',
                     ngram_range = (1,1),
                     tokenizer = token.tokenize)

text_counts= cv.fit_transform(data['Review'])

print(text_counts.shape)



"""Split train and test set"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(text_counts,
                                                    data['Liked'],
                                                    test_size=0.3,
                                                    random_state=1)



"""Model Building and EvaluationModel Building and Evaluation"""

from sklearn.naive_bayes import MultinomialNB

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics

# Model Generation Using Multinomial Naive Bayes
clf = MultinomialNB().fit(X_train, y_train)

predicted= clf.predict(X_test)

print("MultinomialNB Accuracy:",metrics.accuracy_score(y_test, predicted))

from sklearn.naive_bayes import MultinomialNB

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics

# Model Generation Using Multinomial Naive Bayes
clf = MultinomialNB().fit(X_train, y_train)

predicted= clf.predict(X_test)

print("MultinomialNB Accuracy:",metrics.accuracy_score(y_test, predicted))



"""Predict SentimentPredict Sentiment"""

# Transform into matrix
val=cv.transform(["Service of the restaurant is very slow but food was delicous"])

# make prediction
clf.predict(val)# Transform into matrix
val=cv.transform(["Service of the restaurant is very slow but food was delicous"])

# make prediction
clf.predict(val)



"""# **trying Classification Algorithms:**

# **Multinomial Naive Bayes**

multinomial mb
"""

# Fitting Naive Bayes to the Training set
from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB(alpha=0.1)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print ("Confusion Matrix:\n",cm)

# Accuracy, Precision and Recall
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
score1 = accuracy_score(y_test,y_pred)
score2 = precision_score(y_test,y_pred)
score3= recall_score(y_test,y_pred)
print("\n")
print("Accuracy is ",round(score1*100,2),"%")
print("Precision is ",round(score2,2))
print("Recall is ",round(score3,2))

"""## **Bernoulli Naive Bayes**"""

# Fitting Naive Bayes to the Training set
from sklearn.naive_bayes import BernoulliNB
classifier = BernoulliNB(alpha=0.8)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print ("Confusion Matrix:\n",cm)

# Accuracy, Precision and Recall
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
score1 = accuracy_score(y_test,y_pred)
score2 = precision_score(y_test,y_pred)
score3= recall_score(y_test,y_pred)
print("\n")
print("Accuracy is ",round(score1*100,2),"%")
print("Precision is ",round(score2,2))
print("Recall is ",round(score3,2))

"""## **Logistic Regression**"""

# Fitting Logistic Regression to the Training set
from sklearn import linear_model
classifier = linear_model.LogisticRegression(C=1.5)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print ("Confusion Matrix:\n",cm)

# Accuracy, Precision and Recall
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
score1 = accuracy_score(y_test,y_pred)
score2 = precision_score(y_test,y_pred)
score3= recall_score(y_test,y_pred)
print("\n")
print("Accuracy is ",round(score1*100,2),"%")
print("Precision is ",round(score2,2))
print("Recall is ",round(score3,2))



"""**`hence the highest accurancy we got is 76.33% by using Logistic Regression Method `**"""